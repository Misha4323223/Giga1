import os
import requests
import json
import logging
import urllib.parse
from typing import Optional, Dict, Any
import re

class SearchService:
    def __init__(self):
        self.perplexity_api_key = os.environ.get("PERPLEXITY_API_KEY")
        self.yandex_api_key = os.environ.get("YANDEX_SEARCH_API_KEY")
        self.enabled = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        
        available_services = ["DuckDuckGo", "Wikipedia"]
        if self.perplexity_api_key:
            available_services.append("Perplexity")
        if self.yandex_api_key:
            available_services.append("–Ø–Ω–¥–µ–∫—Å.–ü–æ–∏—Å–∫")
            
        logging.info(f"–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤–∫–ª—é—á–µ–Ω: {', '.join(available_services)}")
    
    def search(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
        if not self.enabled:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–ª–∞—Ç–Ω—ã–µ API –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏
        if self.yandex_api_key:
            result = self._search_yandex(query)
            if result:
                return result
                
        if self.perplexity_api_key:
            result = self._search_perplexity(query)
            if result:
                return result
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if any(word in query.lower() for word in ['–ø–æ–≥–æ–¥–∞', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ø—Ä–æ–≥–Ω–æ–∑', '–∫–ª–∏–º–∞—Ç']):
            result = self._search_weather_info(query)
            if result:
                return result
        
        # –î–ª—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - Wikipedia
        if any(word in query.lower() for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–∏—Å—Ç–æ—Ä–∏—è']):
            result = self._search_wikipedia(query)
            if result:
                return result
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        result = self._search_duckduckgo(query)
        if result:
            return result
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º Wikipedia –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        result = self._search_wikipedia(query)
        if result:
            return result
        
        # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return f"üîç **–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ**\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º."
    
    def _search_perplexity(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Perplexity API"""
        try:
            url = "https://api.perplexity.ai/chat/completions"
            
            headers = {
                'Authorization': f'Bearer {self.perplexity_api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": "llama-3.1-sonar-small-128k-online",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        "role": "user", 
                        "content": query
                    }
                ],
                "max_tokens": 500,
                "temperature": 0.2,
                "top_p": 0.9,
                "return_images": False,
                "return_related_questions": False,
                "search_recency_filter": "month",
                "stream": False
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=20)
            
            if response.status_code == 200:
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    sources = ""
                    if 'citations' in result and result['citations']:
                        sources = "\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join([f"‚Ä¢ {url}" for url in result['citations'][:3]])
                    
                    return f"üîç **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:**\n\n{content}{sources}"
                    
            logging.warning(f"Perplexity API –≤–µ—Ä–Ω—É–ª {response.status_code}")
            return None
            
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ Perplexity API: {str(e)}")
            return None
    
    def _search_duckduckgo(self, query: str) -> Optional[str]:
        """–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo Instant Answer API"""
        try:
            # DuckDuckGo Instant Answer API - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            encoded_query = urllib.parse.quote(query)
            url = f"https://api.duckduckgo.com/?q={encoded_query}&format=json&no_html=1&skip_disambig=1"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                result_parts = []
                
                # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
                if data.get('AbstractText'):
                    result_parts.append(f"üìã **–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{data['AbstractText']}")
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                if data.get('Definition'):
                    result_parts.append(f"üìñ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n{data['Definition']}")
                
                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
                if data.get('RelatedTopics'):
                    topics = []
                    for topic in data['RelatedTopics'][:3]:
                        if isinstance(topic, dict) and topic.get('Text'):
                            topics.append(f"‚Ä¢ {topic['Text'][:100]}...")
                    if topics:
                        result_parts.append(f"üîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:**\n" + "\n".join(topics))
                
                # –û—Ç–≤–µ—Ç
                if data.get('Answer'):
                    result_parts.append(f"üí° **–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç:**\n{data['Answer']}")
                
                if result_parts:
                    result = "\n\n".join(result_parts)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    if data.get('AbstractURL'):
                        result += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {data['AbstractURL']}"
                    
                    return f"üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:**\n\n{result}"
                
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {str(e)}")
            return None
    
    def _search_wikipedia(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ Wikipedia API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
        try:
            # Wikipedia API - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            encoded_query = urllib.parse.quote(query)
            url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{encoded_query}"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (ChatBot/1.0)'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('extract'):
                    title = data.get('title', '–°—Ç–∞—Ç—å—è')
                    extract = data['extract']
                    page_url = data.get('content_urls', {}).get('desktop', {}).get('page', '')
                    
                    result = f"üìñ **{title}**\n\n{extract}"
                    if page_url:
                        result += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {page_url}"
                    
                    return f"üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Wikipedia:**\n\n{result}"
            
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Wikipedia: {str(e)}")
            return None
    
    def _search_yandex(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ü–æ–∏—Å–∫ API"""
        try:
            # –Ø–Ω–¥–µ–∫—Å XML API –¥–ª—è –ø–æ–∏—Å–∫–∞
            base_url = "https://yandex.com/search/xml"
            
            params = {
                'query': query,
                'user': 'chatbot',
                'key': self.yandex_api_key,
                'lr': 213,  # –ú–æ—Å–∫–≤–∞
                'l10n': 'ru',
                'sortby': 'rlv',
                'filter': 'none',
                'maxpassages': 3,
                'groupby': 'attr%3Dd.mode%3Ddeep.groups-on-page%3D5.docs-in-group%3D1'
            }
            
            response = requests.get(base_url, params=params, timeout=15)
            
            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
                import xml.etree.ElementTree as ET
                
                root = ET.fromstring(response.content)
                results = []
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                for group in root.findall('.//group'):
                    for doc in group.findall('.//doc'):
                        title_elem = doc.find('.//title')
                        url_elem = doc.find('.//url')
                        passage_elem = doc.find('.//passage')
                        
                        if title_elem is not None and passage_elem is not None:
                            title = title_elem.text or ''
                            url = url_elem.text if url_elem is not None else ''
                            passage = passage_elem.text or ''
                            
                            # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
                            title = re.sub(r'<[^>]+>', '', title)
                            passage = re.sub(r'<[^>]+>', '', passage)
                            
                            results.append({
                                'title': title,
                                'url': url,
                                'snippet': passage
                            })
                
                if results:
                    result_text = "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å:**\n\n"
                    
                    for i, result in enumerate(results[:3], 1):
                        result_text += f"**{i}. {result['title']}**\n"
                        result_text += f"{result['snippet']}\n"
                        if result['url']:
                            result_text += f"üîó {result['url']}\n"
                        result_text += "\n"
                    
                    return result_text
                    
            logging.warning(f"–Ø–Ω–¥–µ–∫—Å API –≤–µ—Ä–Ω—É–ª {response.status_code}")
            return None
            
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å API: {str(e)}")
            return None
    
    def _search_weather_info(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            query_lower = query.lower()
            city = "Moscow"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            city_name_ru = "–ú–æ—Å–∫–≤–µ"  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            # –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            cities_map = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                "–º–æ—Å–∫–≤–∞": ("Moscow", "–ú–æ—Å–∫–≤–µ"),
                "moscow": ("Moscow", "–ú–æ—Å–∫–≤–µ"),
                "–ø–∏—Ç–µ—Ä": ("Saint Petersburg", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"),
                "—Å–ø–±": ("Saint Petersburg", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"),
                "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": ("Saint Petersburg", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"),
                "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": ("Yekaterinburg", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ"),
                "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": ("Novosibirsk", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ"),
                "–∫–∞–∑–∞–Ω—å": ("Kazan", "–ö–∞–∑–∞–Ω–∏"),
                "–∫–∞–∑–∞–Ω": ("Kazan", "–ö–∞–∑–∞–Ω–∏"),
                "—Ä–æ—Å—Ç–æ–≤": ("Rostov-on-Don", "–†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É"),
                "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": ("Krasnodar", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ"),
                "—Ç—É–ª–∞": ("Tula", "–¢—É–ª–µ"),
                "—Ç—É–ª–µ": ("Tula", "–¢—É–ª–µ"),
                "–Ω–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫": ("Novomoskovsk", "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–µ"),
                "—è–∫—É—Ç—Å–∫": ("Yakutsk", "–Ø–∫—É—Ç—Å–∫–µ"),
                "—è–∫—É—Ç–∏–∏": ("Yakutsk", "–Ø–∫—É—Ç–∏–∏"),
                "–º—É—Ä–º–∞–Ω—Å–∫": ("Murmansk", "–ú—É—Ä–º–∞–Ω—Å–∫–µ"),
                # –î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                "—É—Å—É—Ä–∏–π—Å–∫": ("Ussuriysk", "–£—Å—É—Ä–∏–π—Å–∫–µ"),
                "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": ("Vladivostok", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ"),
                "—Ö–∞–±–∞—Ä–æ–≤—Å–∫": ("Khabarovsk", "–•–∞–±–∞—Ä–æ–≤—Å–∫–µ"),
                "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫": ("Blagoveshchensk", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫–µ"),
                "—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫": ("Yuzhno-Sakhalinsk", "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫–µ"),
                "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–∫–∞–º—á–∞—Ç—Å–∫–∏–π": ("Petropavlovsk-Kamchatsky", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ-–ö–∞–º—á–∞—Ç—Å–∫–æ–º"),
                # –°–∏–±–∏—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
                "–æ–º—Å–∫": ("Omsk", "–û–º—Å–∫–µ"),
                "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": ("Krasnoyarsk", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ"),
                "–±–∞—Ä–Ω–∞—É–ª": ("Barnaul", "–ë–∞—Ä–Ω–∞—É–ª–µ"),
                "–∫–µ–º–µ—Ä–æ–≤–æ": ("Kemerovo", "–ö–µ–º–µ—Ä–æ–≤–æ"),
                "—Ç–æ–º—Å–∫": ("Tomsk", "–¢–æ–º—Å–∫–µ"),
                "–∏—Ä–∫—É—Ç—Å–∫": ("Irkutsk", "–ò—Ä–∫—É—Ç—Å–∫–µ"),
                "—É–ª–∞–Ω-—É–¥—ç": ("Ulan-Ude", "–£–ª–∞–Ω-–£–¥—ç"),
                "—á–∏—Ç–∞": ("Chita", "–ß–∏—Ç–µ"),
                # –Æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": ("Volgograd", "–í–æ–ª–≥–æ–≥—Ä–∞–¥–µ"),
                "—Å–æ—á–∏": ("Sochi", "–°–æ—á–∏"),
                "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å": ("Stavropol", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª–µ"),
                "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å": ("Astrakhan", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏"),
                # –ü–æ–≤–æ–ª–∂—å–µ
                "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": ("Nizhny Novgorod", "–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ"),
                "—Å–∞–º–∞—Ä–∞": ("Samara", "–°–∞–º–∞—Ä–µ"),
                "—É—Ñ–∞": ("Ufa", "–£—Ñ–µ"),
                "–ø–µ—Ä–º—å": ("Perm", "–ü–µ—Ä–º–∏"),
                "—Å–∞—Ä–∞—Ç–æ–≤": ("Saratov", "–°–∞—Ä–∞—Ç–æ–≤–µ"),
                # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                "–≤–æ—Ä–æ–Ω–µ–∂": ("Voronezh", "–í–æ—Ä–æ–Ω–µ–∂–µ"),
                "—Ç–≤–µ—Ä—å": ("Tver", "–¢–≤–µ—Ä–∏"),
                "—è—Ä–æ—Å–ª–∞–≤–ª—å": ("Yaroslavl", "–Ø—Ä–æ—Å–ª–∞–≤–ª–µ"),
                "—Ä—è–∑–∞–Ω—å": ("Ryazan", "–†—è–∑–∞–Ω–∏")
            }
            
            # –ò—â–µ–º –≥–æ—Ä–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ
            for city_key, (city_eng, city_ru) in cities_map.items():
                if city_key in query_lower:
                    city = city_eng
                    city_name_ru = city_ru
                    break
            
            # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ wttr.in - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã
            try:
                weather_url = f"https://wttr.in/{city}?format=j1"
                response = requests.get(weather_url, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    current = data.get('current_condition', [{}])[0]
                    
                    if current:
                        temp = current.get('temp_C', 'N/A')
                        feels_like = current.get('FeelsLikeC', 'N/A')
                        humidity = current.get('humidity', 'N/A')
                        wind = current.get('windspeedKmph', 'N/A')
                        desc = current.get('weatherDesc', [{}])[0].get('value', 'N/A')
                        
                        weather_info = f"""üå§Ô∏è **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_name_ru}:**

**–°–µ–π—á–∞—Å:** {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)
**–û–ø–∏—Å–∞–Ω–∏–µ:** {desc}
**–í–ª–∞–∂–Ω–æ—Å—Ç—å:** {humidity}%
**–í–µ—Ç–µ—Ä:** {wind} –∫–º/—á

üìä **–ò—Å—Ç–æ—á–Ω–∏–∫:** wttr.in - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ"""
                        
                        return weather_info
            except:
                pass
            
            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return f"""üå§Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ {city_name_ru}:**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API. 

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ü–æ–≥–æ–¥–∞" –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ
‚Ä¢ –°–∞–π—Ç –ì–∏–¥—Ä–æ–º–µ—Ç—Ü–µ–Ω—Ç—Ä–∞ –†–æ—Å—Å–∏–∏
‚Ä¢ Yandex.–ü–æ–≥–æ–¥–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
            
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–≥–æ–¥—ã: {str(e)}")
            return None
    
    def should_search(self, message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return False
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        search_indicators = [
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å–µ–≥–æ–¥–Ω—è", "–≤—á–µ—Ä–∞", "–Ω–µ–¥–∞–≤–Ω–æ",
            "—Ç–µ–∫—É—â–∏–π", "—Å–µ–π—á–∞—Å", "–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è", "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
            "2024", "2025", "—ç—Ç–æ—Ç –≥–æ–¥", "–≤ —ç—Ç–æ–º –≥–æ–¥—É", "–≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É",
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "–∫—É—Ä—Å", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∫–æ—Ç–∏—Ä–æ–≤–∫–∏", "–±–∏—Ä–∂–∞", "–∞–∫—Ü–∏–∏",
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω", "–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—Ä—É–±–ª—å",
            "–∏–Ω—Ñ–ª—è—Ü–∏—è", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–í–í–ü", "–±—é–¥–∂–µ—Ç",
            
            # –ü–æ–≥–æ–¥–∞ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—è
            "–ø–æ–≥–æ–¥–∞", "–ø—Ä–æ–≥–Ω–æ–∑", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∫–ª–∏–º–∞—Ç", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥",
            "–≤–µ—Ç–µ—Ä", "–¥–∞–≤–ª–µ–Ω–∏–µ", "–≤–ª–∞–∂–Ω–æ—Å—Ç—å",
            
            # –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è
            "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–∏–∑–º–µ–Ω–µ–Ω–∏—è", "—Å–æ–±—ã—Ç–∏—è", "–ø—Ä–æ–∏–∑–æ—à–ª–æ",
            "—Å–ª—É—á–∏–ª–æ—Å—å", "–Ω–æ–≤–æ—Å—Ç—å", "—Å–æ–æ–±—â–∞—é—Ç", "–æ–±—ä—è–≤–∏–ª–∏", "–∑–∞—è–≤–∏–ª–∏",
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–∏—Å—Ç–æ—Ä–∏—è", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ", "–¥–∞–Ω–Ω—ã–µ –æ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "—Ä–µ–π—Ç–∏–Ω–≥", "—Ç–æ–ø", "—Å–ø–∏—Å–æ–∫", "–æ–±–∑–æ—Ä",
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–∞—É–∫–∞
            "–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤—ã–ø—É—Å–∫", "—Ä–µ–ª–∏–∑",
            "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ", "–ø–∞—Ç–µ–Ω—Ç",
            
            # –°–ø–æ—Ä—Ç –∏ –∫—É–ª—å—Ç—É—Ä–∞
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "—Å—á–µ—Ç", "–º–∞—Ç—á", "–∏–≥—Ä–∞", "—á–µ–º–ø–∏–æ–Ω–∞—Ç",
            "—Ñ–∏–ª—å–º", "—Å–µ—Ä–∏–∞–ª", "–∫–Ω–∏–≥–∞", "–º—É–∑—ã–∫–∞", "–ø—Ä–µ–º—å–µ—Ä–∞",
            
            # –ú–µ—Å—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫—Ä—ã—Ç", "–∑–∞–∫—Ä—ã—Ç", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∞–¥—Ä–µ—Å",
            "—Ç–µ–ª–µ—Ñ–æ–Ω", "—Å–∞–π—Ç", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"
        ]
        
        message_lower = message.lower()
        return any(indicator in message_lower for indicator in search_indicators)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞"""
        services = []
        if self.perplexity_api_key:
            services.append("Perplexity API")
        if self.yandex_api_key:
            services.append("–Ø–Ω–¥–µ–∫—Å.–ü–æ–∏—Å–∫")
        services.extend(["DuckDuckGo", "Wikipedia"])
        
        return {
            "enabled": self.enabled,
            "service": " + ".join(services),
            "message": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        }